5+9
grade <- 90
grade
grade <- x(95, 82, 75, 99)
grade <- c(95, 82, 75, 99)
cls
install.packages("swirl")
library(swirl)
swirl()
5+7
x <-5+7
x
y <- x -3
y
z <- c(1.1, 9, 3.14)
?c
z
z+555+z
c(z, 555,z)
z * 2 + 100
my_sqrt <-z - 1
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir <-"C:/Users/Mark Russo/Documents"
old.dir <-getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls
list.files()
file.exists()
file.exists("mytest.R")
fileinfo("mytest.R")
file.info("mytest.R")
file.rename("mytest.R, mytest2.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest.R")
file.path("mytest3.R")
file.path <- args("folder1", "folder2")
file.path <- args(folder1, folder2)
args(folder1, folder2)
file.path(folder1, folder2)
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2"/"testdir3", , recursive= TRUE)
dir.create("testdir2"/"testdir3", showWarnings = TRUE, recursive= TRUE)
dir.create("testdir2", showWarnings = TRUE, recursive= TRUE) file.path("testdir3")
dir.create("testdir2") file.path("testdir3")
dir.create(testdir2) file.path(testdir3)
dir.create("testdir2"/ "testdir3", showWarnings = TRUE, recursive = TRUE, mode= "0777")
dir.create("testdir2", showWarnings = TRUE, recursive = TRUE, mode= "0777")
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(o, 10, by= 0.5)
seq(0, 10, by= 0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times =10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <-num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Mark Russo")
my_char c("Mark")
my_name <- "Mark"
my_name <- c(my_char, "Mark")
my_name
paste (my_name, collapse " ")
paste (my_name, collapse= " ")
paste("Hello", "world", sep = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep= "")
paste(LETTERS, 1:4, sep = "-")
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <-rnorm(1000)
z <-rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <-c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical (vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow= 4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_matrix)
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames("patient", "age", "weight", "bp", "rating", "test")
colnames <- colnames("patient", "age", "weight", "bp", "rating", "test")
my_data <- colnames("patient", "age", "weight", "bp", "rating", "test")
my_data <- colnames(patient, age, weight, bp, rating, test)
colnames(my_matrix)
colnames(my_data)<-cnames
my_data
ls()
rm(list=ls())
git clone https://github.com/russo25/ProgrammingAssignment2/blob/master/cachematrix.R
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
outcomes <- c("heart attack", "heart failure", "pneumonia")
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
ls()
rm(list=ls())
best <- function(state, outcome) {
## Read outcome data -- outcome names are "heart attack", "heart failure", "pneumonia"
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
##Check if the state and outcomes are valid
states <- data[ , 7]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if ((state %in% states) == FALSE) {
stop(print("invalid state"))
}
else if ((outcome %in% outcomes) == FALSE) {
stop (print("invalid outcome"))
}
##Get  subset of the data with the desired state
data2 <- subset(data, State == state)
##Get  desired outcome column from the data file
if (outcome == "heart attack") {
outcome_column <- 11
}
else if (outcome == "heart failure") {
outcome_column <- 17
}
else {
outcome_column <- 23
}
##Get rid of the NA's in the desired outcome column
required_columns <- as.numeric(data2[,outcome_column])
bad_value <- is.na(required_columns)
desired_data <- data2[!bad_value, ]
##Find  hospitals in the rows with the minimum outcome value
columns_considered <- as.numeric(desired_data[, outcome_column])
desired_rows <- which(columns_considered == min(columns_considered))
desired_hospitals <- desired_data[desired_rows, 2]
##If there are multiple hospitals with the minimum outcome value, then return
##the first hospital name from the alphabet sorted hospitallist
if (length(desired_hospitals) > 1) {
hospitals_sorts <- sort(desired_hospitals)
hospitals_sorts[1]
}
else {
desired_hospitals
}
}
heart attack
"heart failure"
desired_hospitals
hospital sorts
hospital_sorts
TX
best("TX", "heart failure")
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
best("TX", "heart failure")
getwd
getwd()
best("TX", "outcome")
source('C:/Users/Mark Russo/Desktop/R/Assignment3/rankhospital.R')
source('C:/Users/Mark Russo/Desktop/R/Assignment3/rankhospital.R')
best("SC", "heart attack")
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
setwd("C:\Users\Mark Russo\Desktop\##R Program Work Area")
setwd("~\Users\Mark Russo\Desktop\##R Program Work Area")
setwd("~\##R Program Work Area")
setwd("C:\Users\Mark Russo\Desktop\R\Assignment3")
getwd()
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
best("SC", "heart attack")
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
best("SC", "heart attack")
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
best("SC", "heart attack")
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
best("SC", "heart attack")
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
best("SC", "heart attack")
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
best("SC", "heart attack")
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
best("SC", "heart attack")
getwd()
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
best("SC", "heart attack")
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
best("SC", "heart attack")
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
best("SC", "heart attack")
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
best("SC", "heart attack")
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
getwd()
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
best("SC", "heart attack")
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
best("SC", "heart attack")
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
best("SC", "heart attack")
getwd()
setwd("C:/Users/Mark Russo/Documents")
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
setwd("C:/Users/Mark Russo/Documents")
best("SC", "heart attack")
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
setwd("C:/Users/Mark Russo/Documents")
best("SC", "heart attack")
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
setwd("C:/Users/Mark Russo/Documents")
best("SC", "heart attack")
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
best("SC", "heart attack")
getwd()
setwd("C:/Users/Mark Russo/Documents")
best("SC", "heart attack")
source('C:/Users/Mark Russo/Desktop/R/Assignment3/rankhospital.R')
source('C:/Users/Mark Russo/Desktop/R/Assignment3/rankhospital.R')
rankhospital("MD", "heart attack", 5000)
source('C:/Users/Mark Russo/Desktop/R/Assignment3/rankhospital.R')
rankhospital("MD", "heart attack", 5000)
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
source('C:/Users/Mark Russo/Desktop/R/Assignment3/rankhospital.R')
source('C:/Users/Mark Russo/Desktop/R/Assignment3/rankall.R')
source('C:/Users/Mark Russo/Desktop/R/Assignment3/best.R')
best("TX", "heart failure")
best("NY", "pneumonia")
best("AK", "pneumonia")
source('C:/Users/Mark Russo/Desktop/R/Assignment3/rankhospital.R')
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
source('C:/Users/Mark Russo/Desktop/R/Assignment3/rankall.R')
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran(tbl_df)
tbl_df(cran)
cran cran
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -X:size, -5:20)
select(cran, -X:size)
select(cran, -X:-size, -5:-20)
select(cran, -5:20)
info()
select(cran, -x:-size)
select(cran, -X:-size)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package== "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, r_version !is.na)
filter(cran, r_version == !is.na)
filter(cran, r_version !is.na == NA)
filter(cran, r_version == !is.na == NA)
filter(cran, r_version == !is.na )
filter(cran, r_version == is.na )
filter(cran, r_version == !NA )
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, asc("country"), desc("r_version", asc("ip_id")))
arrange(cran2, "country", desc("r_version", "ip_id")
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size(size+1000)
mutate(cran3, correct_size+1000
mutate(cran3, correct_size(size + 1000)
mutate(cran3, correct_size)
mutate(cran3, correct_size (size + 1000b)
mutate(cran3, correct_size = (size + 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
ls()
rm(list=ls())
install.packages(httr)
source('C:/Users/Mark Russo/Desktop/##R Program Work Area/Question_1.R')
install.packages("sqldf")
source('C:/Users/Mark Russo/Desktop/##R Program Work Area/Week2Quiz2/Quiz_no_2.R')
install.packages("html")
install.packages("xml")
install.packages("XML")
source('C:/Users/Mark Russo/Desktop/##R Program Work Area/Week2Quiz2/Quiz_no_4.R')
source('C:/Users/Mark Russo/Desktop/##R Program Work Area/Week2Quiz2/Quiz_no_4.R')
source('C:/Users/Mark Russo/Desktop/##R Program Work Area/Week2Quiz2/Quiz_no_4.R')
lines
source('C:/Users/Mark Russo/Desktop/##R Program Work Area/Week2Quiz2/Quiz_no_4.R')
source('C:/Users/Mark Russo/Desktop/##R Program Work Area/Week2Quiz2/Quiz_no_4.R')
lines
source('C:/Users/Mark Russo/Desktop/##R Program Work Area/Week2Quiz2/Quiz_no_4.R')
source('C:/Users/Mark Russo/Desktop/##R Program Work Area/Week2Quiz2/Quiz_no_5.R')
widths
sum(fixed$V8)
source('C:/Users/Mark Russo/Desktop/UCI HAR Dataset/run_analysis.R')
source('C:/Users/Mark Russo/Desktop/UCI HAR Dataset/run_analysis.R')
rm(list=ls())
getwd()
setwd("C:/Users/Mark Russo/Desktop/RUNR")
source('C:/Users/Mark Russo/Desktop/RUNR/run_analysis.R')
